pool:
  vmImage: 'windows-latest'

variables:
  - name: "Build.ArtifactStagingDirectory"
    value: "Artifacts/"

parameters:
  - name: "CakeTarget"
    type: string
    default: "BuildAll"
  - name: "CakeVerbosity"
    type: string
    default: "Normal"
    values:
    - "Quiet"
    - "Minimal"
    - "Normal"
    - "Verbose"
    - "Diagnostic"
  - name: "ReleaseMode"
    type: string
    default: "Beta"
    values:
    - "Alpha"
    - "Beta"
    - "RC"
    - "Stable"
  - name: "RunTests"
    type: boolean
    default: true

trigger:
  batch: true
  branches:
    include:
      - '*'

pr:
  autoCancel: true
  branches:
    include:
      - '*'

steps:

- task: PowerShell@2
  displayName: 'Run DNN Update Versions'
  inputs:
    targetType: filePath
    filePath: ./build.ps1
    arguments: '--target=BuildServerSetVersion --verbosity=${{ parameters.CakeVerbosity }}'

- script: 'sqllocaldb start mssqllocaldb'
  displayName: 'Start Sql LocalDb Service'
  condition: and(succeeded(), eq(parameters.RunTests, true))

- powershell: 'npm config set registry https://www.myget.org/F/dnn-software-public/npm/'
  displayName: 'npm config set registry'
  enabled: false

- powershell: |
   $path = '.\DNN Platform\Library\Properties\AssemblyInfo.cs'
   $pattern3 = '\[assembly: AssemblyStatus'
   (Get-Content $path) | ForEach-Object{
      if($_ -match $pattern3){
       # We have found the matching line
       '[assembly: AssemblyStatus(ReleaseMode.{0})]' -f '${{ parameters.ReleaseMode }}'
      } else {
       $_
      }
     } | Set-Content $path
   
  displayName: 'Update Alpha/Beta/Stable flag'

- task: PowerShell@2
  displayName: 'Run DNN Build via Cake'
  inputs:
    targetType: filePath
    filePath: ./build.ps1
    arguments: '--target=${{ parameters.CakeTarget }} --verbosity=${{ parameters.CakeVerbosity }}'

- task: PowerShell@2
  displayName: 'Run Unit Tests via Cake'
  inputs:
    targetType: filePath
    filePath: ./build.ps1
    arguments: '--target=UnitTests --verbosity=${{ parameters.CakeVerbosity }}'
  continueOnError: true
  condition: and(succeeded(), eq(parameters.RunTests, true))

- task: PublishTestResults@2
  displayName: 'Publish Test Results **/TestResults/*.xml'
  inputs:
    testResultsFormat: VSTest
    testResultsFiles: '**/TestResults/*.trx'
    mergeTestResults: true
    failTaskOnFailedTests: true
  condition: eq(parameters.RunTests, true)

- publish: 'Artifacts'
  continueOnError: true

- task: NuGetCommand@2
  displayName: 'Publish to MyGet'
  inputs:
    command: push
    packagesToPush: 'Artifacts/**/*.nupkg;!Artifacts/**/*.symbols.nupkg'
    nuGetFeedType: external
    publishFeedCredentials: 'DNN-NuGet-MyGet'
  enabled: false

